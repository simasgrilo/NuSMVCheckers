MODULE move(board,whoIs,pecas1,pecas2)
VAR
    lin : {0,1,2,3,4};
    col : {0,1,2,3,4};
    movN: {1,2};
DEFINE
	legalPos := (lin mod 2 = 0 & col mod 2 = 0)|(lin mod 2 = 0 & col mod 2 = 0);
    diagEsq := col - 1;
    diagDir := col + 1;
    linUp := lin + 1;
    linDw := lin - 1;
    canMove := case
                 pecas1 > 0 & whoIs = 1 & lin < 4 & (board[lin][col] = 1 | board[lin][col] = 2):case
                     col = 0 & board[linUp][diagDir] = 0 & movN = 1 : TRUE;
                     col = 3 & board[linUp][diagEsq] = 0 & movN = 2 : TRUE;
                     col > 0 & col < 4:case
                         board[linUp][diagDir] = 0 & movN = 1 : TRUE;
                         board[linUp][diagEsq] = 0 & movN = 2 : TRUE;
                         TRUE: FALSE;
                        esac;
                     TRUE: FALSE;
                    esac;
                 pecas2 > 0 & whoIs = 2 & lin > 0 & (board[lin][col] = 3 | board[lin][col] = 4):case
                     col = 0 & board[linDw][diagDir] = 0 & movN = 1 : TRUE;
                     col = 4 & board[linDw][diagEsq] = 0 & movN = 2 : TRUE;
                     col > 0 & col < 4:case
                         board[linUp][diagDir] = 0 & movN = 1 : TRUE;
                         board[linUp][diagEsq] = 0 & movN = 2 : TRUE;
                         TRUE: FALSE;
                        esac;
                     TRUE: FALSE;
                    esac;
                 TRUE: FALSE;
               esac;
ASSIGN
	next(board[0][0]) := case
							lin = 0 & col = 0 & (canMove): 0;
							canMove & whoIs = 1 & 0 = linUp:case
								 0 = diagDir & movN = 1: 1;
								 0 = diagEsq & movN = 2: 1;
								 TRUE: board[0][0];
								esac;
							canMove & whoIs = 2 & 0 = linDw:case
								 0 = diagDir & movN = 1: 3;
								 0 = diagEsq & movN = 2: 3;
								 TRUE: board[0][0];
								esac;
							TRUE: board[0][0];
						 esac;
	next(board[0][1]) := board[0][1];
	next(board[0][2]) := case
							lin = 0 & col = 2 & (canMove): 0;
							canMove & whoIs = 1 & 0 = linUp:case
								 2 = diagDir & movN = 1: 1;
								 2 = diagEsq & movN = 2: 1;
								 TRUE: board[0][2];
								esac;
							canMove & whoIs = 2 & 0 = linDw:case
								 2 = diagDir & movN = 1: 3;
								 2 = diagEsq & movN = 2: 3;
								 TRUE: board[0][2];
								esac;
							TRUE: board[0][2];
						 esac;
	next(board[0][3]) := board[0][3];
	next(board[0][4]) := case
							lin = 0 & col = 4 & (canMove): 0;
							canMove & whoIs = 1 & 0 = linUp:case
								 4 = diagDir & movN = 1: 1;
								 4 = diagEsq & movN = 2: 1;
								 TRUE: board[0][4];
								esac;
							canMove & whoIs = 2 & 0 = linDw:case
								 4 = diagDir & movN = 1: 3;
								 4 = diagEsq & movN = 2: 3;
								 TRUE: board[0][4];
								esac;
							TRUE: board[0][4];
						 esac;
	next(board[1][0]) := board[1][0];
	next(board[1][1]) := case
							lin = 1 & col = 1 & (canMove): 0;
							canMove & whoIs = 1 & 1 = linUp:case
								 1 = diagDir & movN = 1: 1;
								 1 = diagEsq & movN = 2: 1;
								 TRUE: board[1][1];
								esac;
							canMove & whoIs = 2 & 1 = linDw:case
								 1 = diagDir & movN = 1: 3;
								 1 = diagEsq & movN = 2: 3;
								 TRUE: board[1][1];
								esac;
							TRUE: board[1][1];
						 esac;
	next(board[1][2]) := board[1][2];
	next(board[1][3]) := case
							lin = 1 & col = 3 & (canMove): 0;
							canMove & whoIs = 1 & 1 = linUp:case
								 3 = diagDir & movN = 1: 1;
								 3 = diagEsq & movN = 2: 1;
								 TRUE: board[1][3];
								esac;
							canMove & whoIs = 2 & 1 = linDw:case
								 3 = diagDir & movN = 1: 3;
								 3 = diagEsq & movN = 2: 3;
								 TRUE: board[1][3];
								esac;
							TRUE: board[1][3];
						 esac;
	next(board[1][4]) := board[1][4];
	next(board[2][0]) := case
							lin = 2 & col = 0 & (canMove): 0;
							canMove & whoIs = 1 & 2 = linUp:case
								 0 = diagDir & movN = 1: 1;
								 0 = diagEsq & movN = 2: 1;
								 TRUE: board[2][0];
								esac;
							canMove & whoIs = 2 & 2 = linDw:case
								 0 = diagDir & movN = 1: 3;
								 0 = diagEsq & movN = 2: 3;
								 TRUE: board[2][0];
								esac;
							TRUE: board[2][0];
						 esac;
	next(board[2][1]) := board[2][1];
	next(board[2][2]) := case
							lin = 2 & col = 2 & (canMove): 0;
							canMove & whoIs = 1 & 2 = linUp:case
								 2 = diagDir & movN = 1: 1;
								 2 = diagEsq & movN = 2: 1;
								 TRUE: board[2][2];
								esac;
							canMove & whoIs = 2 & 2 = linDw:case
								 2 = diagDir & movN = 1: 3;
								 2 = diagEsq & movN = 2: 3;
								 TRUE: board[2][2];
								esac;
							TRUE: board[2][2];
						 esac;
	next(board[2][3]) := board[2][3];
	next(board[2][4]) := case
							lin = 2 & col = 4 & (canMove): 0;
							canMove & whoIs = 1 & 2 = linUp:case
								 4 = diagDir & movN = 1: 1;
								 4 = diagEsq & movN = 2: 1;
								 TRUE: board[2][4];
								esac;
							canMove & whoIs = 2 & 2 = linDw:case
								 4 = diagDir & movN = 1: 3;
								 4 = diagEsq & movN = 2: 3;
								 TRUE: board[2][4];
								esac;
							TRUE: board[2][4];
						 esac;
	next(board[3][0]) := board[3][0];
	next(board[3][1]) := case
							lin = 3 & col = 1 & (canMove): 0;
							canMove & whoIs = 1 & 3 = linUp:case
								 1 = diagDir & movN = 1: 1;
								 1 = diagEsq & movN = 2: 1;
								 TRUE: board[3][1];
								esac;
							canMove & whoIs = 2 & 3 = linDw:case
								 1 = diagDir & movN = 1: 3;
								 1 = diagEsq & movN = 2: 3;
								 TRUE: board[3][1];
								esac;
							TRUE: board[3][1];
						 esac;
	next(board[3][2]) := board[3][2];
	next(board[3][3]) := case
							lin = 3 & col = 3 & (canMove): 0;
							canMove & whoIs = 1 & 3 = linUp:case
								 3 = diagDir & movN = 1: 1;
								 3 = diagEsq & movN = 2: 1;
								 TRUE: board[3][3];
								esac;
							canMove & whoIs = 2 & 3 = linDw:case
								 3 = diagDir & movN = 1: 3;
								 3 = diagEsq & movN = 2: 3;
								 TRUE: board[3][3];
								esac;
							TRUE: board[3][3];
						 esac;
	next(board[3][4]) := board[3][4];
	next(board[4][0]) := case
							lin = 4 & col = 0 & (canMove): 0;
							canMove & whoIs = 1 & 4 = linUp:case
								 0 = diagDir & movN = 1: 1;
								 0 = diagEsq & movN = 2: 1;
								 TRUE: board[4][0];
								esac;
							canMove & whoIs = 2 & 4 = linDw:case
								 0 = diagDir & movN = 1: 3;
								 0 = diagEsq & movN = 2: 3;
								 TRUE: board[4][0];
								esac;
							TRUE: board[4][0];
						 esac;
	next(board[4][1]) := board[4][1];
	next(board[4][2]) := case
							lin = 4 & col = 2 & (canMove): 0;
							canMove & whoIs = 1 & 4 = linUp:case
								 2 = diagDir & movN = 1: 1;
								 2 = diagEsq & movN = 2: 1;
								 TRUE: board[4][2];
								esac;
							canMove & whoIs = 2 & 4 = linDw:case
								 2 = diagDir & movN = 1: 3;
								 2 = diagEsq & movN = 2: 3;
								 TRUE: board[4][2];
								esac;
							TRUE: board[4][2];
						 esac;
	next(board[4][3]) := board[4][3];
	next(board[4][4]) := case
							lin = 4 & col = 4 & (canMove): 0;
							canMove & whoIs = 1 & 4 = linUp:case
								 4 = diagDir & movN = 1: 1;
								 4 = diagEsq & movN = 2: 1;
								 TRUE: board[4][4];
								esac;
							canMove & whoIs = 2 & 4 = linDw:case
								 4 = diagDir & movN = 1: 3;
								 4 = diagEsq & movN = 2: 3;
								 TRUE: board[4][4];
								esac;
							TRUE: board[4][4];
						 esac;
	next(pecas1) := pecas1;
	next(pecas2) := pecas2;
FAIRNESS legalPos
MODULE main
VAR
    board : array 0..4 of array 0..4 of 0..5;
    whoIs : 1..2;
    pecas1 : 0..2;
    pecas2 : 0..2;
    moveTest: move(board,whoIs,pecas1,pecas2);
ASSIGN
    init(whoIs) := 1;
    init(pecas1) := 1;
    init(pecas2) := 0;
	init(board[0][0]) := 0;
	init(board[0][1]) := 5;
	init(board[0][2]) := 0;
	init(board[0][3]) := 5;
	init(board[0][4]) := 0;
	init(board[1][0]) := 5;
	init(board[1][1]) := 0;
	init(board[1][2]) := 5;
	init(board[1][3]) := 0;
	init(board[1][4]) := 5;
	init(board[2][0]) := 0;
	init(board[2][1]) := 5;
	init(board[2][2]) := 0;
	init(board[2][3]) := 5;
	init(board[2][4]) := 0;
	init(board[3][0]) := 5;
	init(board[3][1]) := 0;
	init(board[3][2]) := 5;
	init(board[3][3]) := 0;
	init(board[3][4]) := 5;
	init(board[4][0]) := 0;
	init(board[4][1]) := 5;
	init(board[4][2]) := 0;
	init(board[4][3]) := 5;
	init(board[4][4]) := 0;
SPEC
    EF (board[0][0] = 0)