MODULE move(board,whoIs,pecas1,pecas2)
VAR
	lin: {0,1,2,3};
	colAux: {0,2};
	movN: {1,2};
DEFINE
    col := case
             lin mod 2 = 0:colAux;
             lin mod 2 = 1:colAux + 1;
             TRUE: 0;
            esac;
	diagEsq := case
                col - 1 > -1:col - 1;
                col - 1 = -1 & lin mod 2=0 : 0; 
                col - 1 = -1 & lin mod 2=1 : 1; 
                TRUE:0;
               esac;
    diagDir := case
                col + 1 < 4:col + 1;
                col + 1 = 4 & lin mod 2=0 : 0; 
                col + 1 = 4 & lin mod 2=1 : 1; 
                TRUE:0;
               esac;
    linDw := case
                lin - 1 > -1:lin - 1;
                lin - 1 = -1 & col mod 2=0 : 0; 
                lin - 1 = -1 & col mod 2=1 : 1; 
                TRUE:0;
               esac;
    linUp := case
                lin + 1 < 4 :lin + 1;
                lin + 1 = 4 & col mod 2=0 : 0; 
                lin + 1 = 4 & col mod 2=1 : 1; 
                TRUE:0;
               esac;
    lin2Up := case
                lin + 2 < 4 :lin + 2;
                lin + 2 >= 4 & col mod 2=0 : 1; 
                lin + 2 >= 4 & col mod 2=1 : 0; 
                TRUE:0;
               esac;
    lin2Dw := case
                lin - 2 > -1:lin - 2;
                lin - 2 <= -1 & col mod 2=0 : 1; 
                lin - 2 <= -1 & col mod 2=1 : 0; 
                TRUE:0;
               esac;
    diag2Esq := case
                col - 2 > -1:col - 2;
                col - 2 <= -1 & lin mod 2=0 : 1; 
                col - 2 <= -1 & lin mod 2=1 : 0; 
                TRUE:0;
               esac;
    diag2Dir := case
                col + 2 < 4:col + 2;
                col + 2 >= 4 & lin mod 2=0 : 1; 
                col + 2 >= 4 & lin mod 2=1 : 0; 
                TRUE:0;
               esac;
    canMove :=case
                 pecas1 > 0 & whoIs = 1 & (board[lin][col] = 1 | board[lin][col] = 2):case
                         board[linUp][diagDir] = 0 & movN = 1 : TRUE;
                         board[linUp][diagEsq] = 0 & movN = 2 : TRUE;
                         TRUE: FALSE;
                      esac;
                 pecas2 > 0 & whoIs = 2 & (board[lin][col] = 3 | board[lin][col] = 4):case
                         board[linDw][diagDir] = 0 & movN = 1 : TRUE;
                         board[linDw][diagEsq] = 0 & movN = 2 : TRUE;
                         TRUE: FALSE;
                        esac;
                 TRUE: FALSE;
               esac;
    canJump := case
                 pecas1 > 0 & whoIs = 1 & (board[lin][col] = 1 | board[lin][col] = 2):case
                          movN = 1:case
                             (board[linDw][diagDir]= 3 | board[linDw][diagDir]= 4) & board[lin2Dw][diag2Dir]= 0:TRUE;
                             (board[linUp][diagDir]= 3 | board[linUp][diagDir]= 4) & board[lin2Up][diag2Dir]= 0:TRUE;
                             TRUE: FALSE;
                            esac;
                          movN = 2:case
                             (board[linDw][diagEsq]= 3 | board[linDw][diagEsq]= 4) & board[lin2Dw][diag2Esq]= 0:TRUE;
                             (board[linUp][diagEsq]= 3 | board[linUp][diagEsq]= 4) & board[lin2Up][diag2Esq]= 0:TRUE;
                             TRUE: FALSE;
                            esac;
                        TRUE:FALSE;
                       esac;
                pecas2 > 0 & whoIs = 2 & (board[lin][col] = 3 | board[lin][col] = 4):case
                          movN = 1:case
                             (board[linDw][diagDir]= 1 | board[linDw][diagDir]= 2) & board[lin2Dw][diag2Dir]= 0:TRUE;
                             (board[linUp][diagDir]= 1 | board[linUp][diagDir]= 2) & board[lin2Up][diag2Dir]= 0:TRUE;
                             TRUE: FALSE;
                            esac;
                          movN = 2:case
                             (board[linDw][diagEsq]= 1 | board[linDw][diagEsq]= 2) & board[lin2Dw][diag2Esq]= 0:TRUE;
                             (board[linUp][diagEsq]= 1 | board[linUp][diagEsq]= 2) & board[lin2Up][diag2Esq]= 0:TRUE;
                             TRUE: FALSE;
                            esac;
                          TRUE: FALSE;
                         esac;
                TRUE: FALSE;
               esac;
ASSIGN
    next(board[0][0]) := case
                            lin = 0 & col = 0 & (canMove | canJump): 0;
                            canJump & 0 = linUp & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)): 0;
                            canJump & 0 = lin2Up & ((0 = diag2Dir & movN = 1)|(0 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[0][0];
                                esac;
                            canJump & 0 = linDw & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)): 0;
                            canJump & 0 = lin2Dw & ((0 = diag2Dir & movN = 1)|(0 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[0][0];
                                esac;
                            !canJump & canMove & whoIs = 1 & 0 = linUp & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 0 = linDw & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)):3;
                            TRUE: board[0][0];
                         esac;
    next(board[0][1]) := board[0][1];
    next(board[0][2]) := case
                            lin = 0 & col = 2 & (canMove | canJump): 0;
                            canJump & 0 = linUp & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)): 0;
                            canJump & 0 = lin2Up & ((2 = diag2Dir & movN = 1)|(2 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[0][2];
                                esac;
                            canJump & 0 = linDw & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)): 0;
                            canJump & 0 = lin2Dw & ((2 = diag2Dir & movN = 1)|(2 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[0][2];
                                esac;
                            !canJump & canMove & whoIs = 1 & 0 = linUp & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 0 = linDw & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)):3;
                            TRUE: board[0][2];
                         esac;
    next(board[0][3]) := board[0][3];
    next(board[1][0]) := board[1][0];
    next(board[1][1]) := case
                            lin = 1 & col = 1 & canMove: 0;
                            canJump & 1 = linUp & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)): 0;
                            canJump & 1 = lin2Up & ((1 = diag2Dir & movN = 1)|(1 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[1][1];
                                esac;
                            canJump & 1 = linDw & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)): 0;
                            canJump & 1 = lin2Dw & ((1 = diag2Dir & movN = 1)|(1 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[1][1];
                                esac;
                            !canJump & canMove & whoIs = 1 & 1 = linUp & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 1 = linDw & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)):3;
                            TRUE: board[1][1];
                         esac;
    next(board[1][2]) := board[1][2];
    next(board[1][3]) := case
                            lin = 1 & col = 3 & canMove: 0;
                            canJump & 1 = linUp & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)): 0;
                            canJump & 1 = lin2Up & ((3 = diag2Dir & movN = 1)|(3 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[1][3];
                                esac;
                            canJump & 1 = linDw & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)): 0;
                            canJump & 1 = lin2Dw & ((3 = diag2Dir & movN = 1)|(3 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[1][3];
                                esac;
                            !canJump & canMove & whoIs = 1 & 1 = linUp & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 1 = linDw & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)):3;
                            TRUE: board[1][3];
                         esac;
    next(board[2][0]) := case
                            lin = 2 & col = 0 & (canMove | canJump): 0;
                            canJump & 2 = linUp & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)): 0;
                            canJump & 2 = lin2Up & ((0 = diag2Dir & movN = 1)|(0 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[2][0];
                                esac;
                            canJump & 2 = linDw & ((0 = diagDir & movN = 1)|(0 = diagEsq & movN = 2)): 0;
                            canJump & 2 = lin2Dw & ((0 = diag2Dir & movN = 1)|(0 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[2][0];
                                esac;
                            !canJump & canMove & whoIs = 1 & 2 = linUp & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 2 = linDw & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)):3;
                            TRUE: board[2][0];
                         esac;
    next(board[2][1]) := board[2][1];
    next(board[2][2]) := case
                            lin = 2 & col = 2 & (canMove | canJump): 0;
                            canJump & 2 = linUp & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)): 0;
                            canJump & 2 = lin2Up & ((2 = diag2Dir & movN = 1)|(2 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[2][2];
                                esac;
                            canJump & 2 = linDw & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)): 0;
                            canJump & 2 = lin2Dw & ((2 = diag2Dir & movN = 1)|(2 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[2][2];
                                esac;
                            !canJump & canMove & whoIs = 1 & 2 = linUp & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 2 = linDw & ((2 = diagDir & movN = 1)|(2 = diagEsq & movN = 2)):3;
                            TRUE: board[2][2];
                         esac;
    next(board[2][3]) := board[2][3];
    next(board[3][0]) := board[3][0];
    next(board[3][1]) := case
                            lin = 3 & col = 1 & canMove: 0;
                            canJump & 3 = linUp & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)): 0;
                            canJump & 3 = lin2Up & ((1 = diag2Dir & movN = 1)|(1 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[3][1];
                                esac;
                            canJump & 3 = linDw & ((1 = diagDir & movN = 1)|(1 = diagEsq & movN = 2)): 0;
                            canJump & 3 = lin2Dw & ((1 = diag2Dir & movN = 1)|(1 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[3][1];
                                esac;
                            !canJump & canMove & whoIs = 1 & 3 = linUp & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 3 = linDw & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)):3;
                            TRUE: board[3][1];
                         esac;
    next(board[3][2]) := board[3][2];
    next(board[3][3]) := case
                            lin = 3 & col = 3 & canMove: 0;
                            canJump & 3 = linUp & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)): 0;
                            canJump & 3 = lin2Up & ((3 = diag2Dir & movN = 1)|(3 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[3][3];
                                esac;
                            canJump & 3 = linDw & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)): 0;
                            canJump & 3 = lin2Dw & ((3 = diag2Dir & movN = 1)|(3 = diag2Esq & movN = 2)):case
                                 whoIs = 1: 1;
                                 whoIs = 2: 3;
                                 TRUE: board[3][3];
                                esac;
                            !canJump & canMove & whoIs = 1 & 3 = linUp & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)):1;
                            !canJump & canMove & whoIs = 2 & 3 = linDw & ((3 = diagDir & movN = 1)|(3 = diagEsq & movN = 2)):3;
                            TRUE: board[3][3];
                         esac;

    next(whoIs) := case
                    (canMove|canJump) & whoIs = 1: 2;
                    (canMove|canJump) & whoIs = 2: 1;
                    TRUE: whoIs;
                   esac;
    next(lin) :=
	next(pecas1) := case
                      pecas1 > 0 & whoIs = 2 & canJump:pecas1 - 1;
                      TRUE:pecas1;
                    esac;
    next(pecas2) := case
                      pecas2 > 0 & whoIs = 1 & canJump:pecas2 - 1;
                      TRUE:pecas2;
                    esac;
MODULE main
VAR
    board : array 0..3 of array 0..3 of 0..5;
    whoIs : 1..2;
    pecas1 : 0..2;
    pecas2 : 0..2;
    move: move(board,whoIs,pecas1,pecas2);
ASSIGN
    init(whoIs) := 1;
    init(pecas1) := 1;
    init(pecas2) := 2;
    init(board[0][0]) := 0;
    init(board[0][1]) := 5;
    init(board[0][2]) := 0;
    init(board[0][3]) := 5;
    init(board[1][0]) := 5;
    init(board[1][1]) := 1;
    init(board[1][2]) := 5;
    init(board[1][3]) := 0;
    init(board[2][0]) := 0;
    init(board[2][1]) := 5;
    init(board[2][2]) := 0;
    init(board[2][3]) := 5;
    init(board[3][0]) := 5;
    init(board[3][1]) := 3;
    init(board[3][2]) := 5;
    init(board[3][3]) := 3;
SPEC
  EF (pecas1 > 0 & pecas2 = 0)
SPEC
  EF (pecas1 = 0 & pecas2 > 0)