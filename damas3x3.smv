MODULE move(board,whoIs,pecas1,pecas2)
VAR
    lin : {0,1,2};
    col : {0,1,2};
    movN: {1,2};
DEFINE
	legalPos := (lin mod 2 = 0 & col mod 2 = 0)|(lin mod 2 = 0 & col mod 2 = 0);
    diagEsq := col - 1;
    diagDir := col + 1;
    linUp := lin + 1;
    linDw := lin - 1;
    lin2Up := lin + 2;
    lin2Dw := lin - 2;
    diag2Esq := col - 2;
    diag2Dir := col + 2;
    canMove := case
                 pecas1 > 0 & whoIs = 1 & lin < 2 & (board[lin][col] = 1 | board[lin][col] = 2):case
                     col = 0 & board[linUp][diagDir] = 0 & movN = 1 : TRUE;
                     col = 2 & board[linUp][diagEsq] = 0 & movN = 2 : TRUE;
                     col > 0 & col < 2:case
                         board[linUp][diagDir] = 0 & movN = 1 : TRUE;
                         board[linUp][diagEsq] = 0 & movN = 2 : TRUE;
                         TRUE: FALSE;
                        esac;
                     TRUE: FALSE;
                    esac;
                 pecas2 > 0 & whoIs = 2 & lin > 0 & (board[lin][col] = 3 | board[lin][col] = 4):case
                     col = 0 & board[linDw][diagDir] = 0 & movN = 1 : TRUE;
                     col = 2 & board[linDw][diagEsq] = 0 & movN = 2 : TRUE;
                     col > 0 & col < 2:case
                         board[linDw][diagDir] = 0 & movN = 1 : TRUE;
                         board[linDw][diagEsq] = 0 & movN = 2 : TRUE;
                         TRUE: FALSE;
                       esac;
                     TRUE: FALSE;
                    esac;
                 TRUE: FALSE;
               esac;
    canJump := case
                 whoIs = 1 & (board[lin][col] = 1 | board[lin][col] = 2):case
                   lin = 2:case
                     col = 2 & (board[linDw][diagEsq] = 3 | board[linDw][diagEsq] = 4) & board[lin2Dw][diag2Esq] = 0: TRUE;
                     col = 0 & (board[linDw][diagDir] = 3 | board[linDw][diagDir] = 4) & board[lin2Dw][diag2Dir] = 0: TRUE;
                     col > 0 & col < 2 & diag2Esq>0 & diag2Dir<2:case
                       (board[linDw][diagDir]= 3 | board[linDw][diagDir]= 4) & board[lin2Dw][diag2Dir]= 0: TRUE;
                       (board[linDw][diagEsq]= 3 | board[linDw][diagEsq]= 4) & board[lin2Dw][diag2Esq]= 0: TRUE;
                       TRUE: FALSE;
                     esac;
                     TRUE: FALSE;
                    esac;
                   lin = 0:case
                     col = 0 & (board[linUp][diagDir] = 3 | board[linUp][diagDir] = 4) & board[lin2Up][diag2Dir] = 0: TRUE;
                     col = 2 & (board[linUp][diagEsq] = 3 | board[linUp][diagEsq] = 4) & board[lin2Up][diag2Esq] = 0: TRUE;
                     col > 0 & col < 2 & diag2Esq>0 & diag2Dir<2:case
                       (board[linUp][diagDir]= 3 | board[linUp][diagDir]= 4) & board[lin2Up][diag2Dir]= 0: TRUE;
                       (board[linUp][diagEsq]= 3 | board[linUp][diagEsq]= 4) & board[lin2Up][diag2Esq]= 0: TRUE;
                       TRUE: FALSE;
                     esac;
                     TRUE: FALSE;
                    esac;
                   lin > 0 & lin < 2 & lin2Dw > 0 & lin2Up < 3:case
                     col = 2 & (board[linDw][diagEsq] = 3 | board[linDw][diagEsq] = 4) & board[lin2Dw][diag2Esq] = 0: TRUE;
                     col = 2 & (board[linUp][diagEsq] = 3 | board[linUp][diagEsq] = 4) & board[lin2Up][diag2Esq] = 0: TRUE;
                     col = 0 & (board[linDw][diagDir] = 3 | board[linDw][diagDir] = 4) & board[lin2Dw][diag2Dir] = 0: TRUE;
                     col = 0 & (board[linUp][diagDir] = 3 | board[linUp][diagDir] = 4) & board[lin2Up][diag2Dir] = 0: TRUE;
                     col > 0 & col < 2 & diag2Esq>0 & diag2Dir<2:case
                       (board[linDw][diagDir]= 3 | board[linDw][diagDir]= 4) & board[lin2Dw][diag2Dir]= 0: TRUE;
                       (board[linDw][diagEsq]= 3 | board[linDw][diagEsq]= 4) & board[lin2Dw][diag2Esq]= 0: TRUE;
                       (board[linUp][diagDir]= 3 | board[linUp][diagDir]= 4) & board[lin2Up][diag2Dir]= 0: TRUE;
                       (board[linUp][diagEsq]= 3 | board[linUp][diagEsq]= 4) & board[lin2Up][diag2Esq]= 0: TRUE;
                       TRUE: FALSE;
                     esac;
                     TRUE: FALSE;
                    esac;
                    TRUE: FALSE;
                   esac;
                 whoIs = 2 & (board[lin][col] = 3 | board[lin][col] = 4):case
                   lin = 2:case
                     col = 2 & (board[linDw][diagEsq] = 1 | board[linDw][diagEsq] = 2) & board[lin2Dw][diag2Esq] = 0: TRUE;
                     col = 0 & (board[linDw][diagDir] = 1 | board[linDw][diagDir] = 2) & board[lin2Dw][diag2Dir] = 0: TRUE;
                     col > 0 & col < 2 & diag2Esq>0 & diag2Dir<2:case
                       (board[linDw][diagDir]= 1 | board[linDw][diagDir]= 1) & board[lin2Dw][diag2Dir]= 0: TRUE;
                       (board[linDw][diagEsq]= 1 | board[linDw][diagEsq]= 1) & board[lin2Dw][diag2Esq]= 0: TRUE;
                       TRUE: FALSE;
                     esac;
                     TRUE: FALSE;
                    esac;
                   lin = 0:case
                     col = 0 & (board[linUp][diagDir] = 1 | board[linUp][diagDir] = 2) & board[lin2Up][diag2Dir] = 0: TRUE;
                     col = 2 & (board[linUp][diagEsq] = 1 | board[linUp][diagEsq] = 2) & board[lin2Up][diag2Esq] = 0: TRUE;
                     col > 0 & col < 2 & diag2Esq>0 & diag2Dir<2:case
                       (board[linUp][diagDir]= 1 | board[linUp][diagDir]= 2) & board[lin2Up][diag2Dir]= 0: TRUE;
                       (board[linUp][diagEsq]= 1 | board[linUp][diagEsq]= 2) & board[lin2Up][diag2Esq]= 0: TRUE;
                       TRUE: FALSE;
                     esac;
                    TRUE: FALSE;
                    esac;
                   lin > 0 & lin < 2 & lin2Dw > 0 & lin2Up < 3:case
                     col = 2 & (board[linDw][diagEsq] = 1 | board[linDw][diagEsq] = 2) & board[lin2Dw][diag2Esq] = 0: TRUE;
                     col = 2 & (board[linUp][diagEsq] = 1 | board[linUp][diagEsq] = 2) & board[lin2Up][diag2Esq] = 0: TRUE;
                     col = 0 & (board[linDw][diagDir] = 1 | board[linDw][diagDir] = 2) & board[lin2Dw][diag2Dir] = 0: TRUE;
                     col = 0 & (board[linUp][diagDir] = 1 | board[linUp][diagDir] = 2) & board[lin2Up][diag2Dir] = 0: TRUE;
                     col > 0 & col < 2 & diag2Esq>0 & diag2Dir<2:case
                       (board[linDw][diagDir]= 1 | board[linDw][diagDir]= 2) & board[lin2Dw][diag2Dir]= 0: TRUE;
                       (board[linDw][diagEsq]= 1 | board[linDw][diagEsq]= 2) & board[lin2Dw][diag2Esq]= 0: TRUE;
                       (board[linUp][diagDir]= 1 | board[linUp][diagDir]= 2) & board[lin2Up][diag2Dir]= 0: TRUE;
                       (board[linUp][diagEsq]= 1 | board[linUp][diagEsq]= 2) & board[lin2Up][diag2Esq]= 0: TRUE;
                       TRUE: FALSE;
                     esac;
                     TRUE: FALSE;
                    esac;
                    TRUE: FALSE;
                   esac;
                   TRUE: FALSE;
                  esac;
ASSIGN
	next(board[-1][-1]) := board[-1][-1];
	next(board[-1][0]) := board[-1][0];
	next(board[-1][1]) := board[-1][1];
	next(board[-1][2]) := board[-1][2];
	next(board[-1][3]) := board[-1][3];
	next(board[0][-1]) := board[0][-1];
	next(board[0][0]) := case
							lin = 0 & col = 0 & (canMove | canJump): 0;
							canJump & 0 = linUp & (0 = diagDir | 0 = diagEsq): 0;
							canJump & 0 = lin2Up & (0 = diag2Dir | 0 = diag2Esq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[0][0];
								esac;
							!canJump & canMove & whoIs = 1 & 0 = linUp:case
								 0 = diagDir & movN = 1: 1;
								 0 = diagEsq & movN = 2: 1;
								 TRUE: board[0][0];
								esac;
							!canJump & canMove & whoIs = 2 & 0 = linDw:case
								 0 = diagDir & movN = 1: 3;
								 0 = diagEsq & movN = 2: 3;
								 TRUE: board[0][0];
								esac;
							TRUE: board[0][0];
						 esac;
	next(board[0][1]) := board[0][1];
	next(board[0][2]) := case
							lin = 0 & col = 2 & (canMove | canJump): 0;
							canJump & 0 = linUp & (2 = diagDir | 2 = diagEsq): 0;
							canJump & 0 = lin2Up & (2 = diag2Dir | 2 = diag2Esq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[0][2];
								esac;
							!canJump & canMove & whoIs = 1 & 0 = linUp:case
								 2 = diagDir & movN = 1: 1;
								 2 = diagEsq & movN = 2: 1;
								 TRUE: board[0][2];
								esac;
							!canJump & canMove & whoIs = 2 & 0 = linDw:case
								 2 = diagDir & movN = 1: 3;
								 2 = diagEsq & movN = 2: 3;
								 TRUE: board[0][2];
								esac;
							TRUE: board[0][2];
						 esac;
	next(board[0][3]) := board[0][3];
	next(board[1][-1]) := board[1][-1];
	next(board[1][0]) := board[1][0];
	next(board[1][1]) := case
							lin = 1 & col = 1 & canMove: 0;
							canJump & 1 = linUp & (1 = diagDir | 1 = diagEsq): 0;
							canJump & 1 = lin2Up & (1 = diag2Dir | 1 = diag2Esq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[1][1];
								esac;
							!canJump & canMove & whoIs = 1 & 1 = linUp:case
								 1 = diagDir & movN = 1: 1;
								 1 = diagEsq & movN = 2: 1;
								 TRUE: board[1][1];
								esac;
							!canJump & canMove & whoIs = 2 & 1 = linDw:case
								 1 = diagDir & movN = 1: 3;
								 1 = diagEsq & movN = 2: 3;
								 TRUE: board[1][1];
								esac;
							TRUE: board[1][1];
						 esac;
	next(board[1][2]) := board[1][2];
	next(board[1][3]) := board[1][3];
	next(board[2][-1]) := board[2][-1];
	next(board[2][0]) := case
							lin = 2 & col = 0 & (canMove | canJump): 0;
							canJump & 2 = linUp & (0 = diagDir | 0 = diagEsq): 0;
							canJump & 2 = lin2Up & (0 = diag2Dir | 0 = diag2Esq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[2][0];
								esac;
							!canJump & canMove & whoIs = 1 & 2 = linUp:case
								 0 = diagDir & movN = 1: 1;
								 0 = diagEsq & movN = 2: 1;
								 TRUE: board[2][0];
								esac;
							!canJump & canMove & whoIs = 2 & 2 = linDw:case
								 0 = diagDir & movN = 1: 3;
								 0 = diagEsq & movN = 2: 3;
								 TRUE: board[2][0];
								esac;
							TRUE: board[2][0];
						 esac;
	next(board[2][1]) := board[2][1];
	next(board[2][2]) := case
							lin = 2 & col = 2 & (canMove | canJump): 0;
							canJump & 2 = linUp & (2 = diagDir | 2 = diagEsq): 0;
							canJump & 2 = lin2Up & (2 = diag2Dir | 2 = diag2Esq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[2][2];
								esac;
							!canJump & canMove & whoIs = 1 & 2 = linUp:case
								 2 = diagDir & movN = 1: 1;
								 2 = diagEsq & movN = 2: 1;
								 TRUE: board[2][2];
								esac;
							!canJump & canMove & whoIs = 2 & 2 = linDw:case
								 2 = diagDir & movN = 1: 3;
								 2 = diagEsq & movN = 2: 3;
								 TRUE: board[2][2];
								esac;
							TRUE: board[2][2];
						 esac;
	next(board[2][3]) := board[2][3];
	next(board[3][-1]) := board[3][-1];
	next(board[3][0]) := board[3][0];
	next(board[3][1]) := board[3][1];
	next(board[3][2]) := board[3][2];
	next(board[3][3]) := board[3][3];
    next(whoIs) := case
                    whoIs = 1: 2;
                    whoIs = 2: 1;
                    TRUE: whoIs;
                   esac;
	next(pecas1) := pecas1;
	next(pecas2) := pecas2;
JUSTICE legalPos
SPEC
  EX (lin = 0 & col =1 & board[0][0] = 1)
MODULE main
VAR
    board : array -1..3 of array -1..3 of 0..5;
    whoIs : 1..2;
    pecas1 : 0..2;
    pecas2 : 0..2;
    moveTest: move(board,whoIs,pecas1,pecas2);
ASSIGN
    init(whoIs) := 1;
    init(pecas1) := 1;
    init(pecas2) := 0;
	init(board[-1][-1]) := 5;
	init(board[-1][0]) := 5;
	init(board[-1][1]) := 5;
	init(board[-1][2]) := 5;
	init(board[-1][3]) := 5;
	init(board[0][-1]) := 5;
	init(board[0][0]) := 1;
	init(board[0][1]) := 5;
	init(board[0][2]) := 0;
	init(board[0][3]) := 5;
	init(board[1][-1]) := 5;
	init(board[1][0]) := 5;
	init(board[1][1]) := 3;
	init(board[1][2]) := 5;
	init(board[1][3]) := 5;
	init(board[2][-1]) := 5;
	init(board[2][0]) := 0;
	init(board[2][1]) := 5;
	init(board[2][2]) := 0;
	init(board[2][3]) := 5;
	init(board[3][-1]) := 5;
	init(board[3][0]) := 5;
	init(board[3][1]) := 5;
	init(board[3][2]) := 5;
	init(board[3][3]) := 5;
SPEC
  EF (board[2][0] = 0)
SPEC 
  EF (board[2][2] = 1)
SPEC 
  EF (board[0][0] = 0)