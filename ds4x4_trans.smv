MODULE main
VAR
    board : array 0..3 of array 0..3 of {0,1,2,3,4,5};
    whoIs : 1..2;
    lin : 0..4;
    col : 0..4;
ASSIGN
    init(board[0][0]) := 1;
    init(board[0][1]) := 5;
    init(board[0][2]) := 0;
    init(board[0][3]) := 5;
    init(board[1][0]) := 5;
    init(board[1][1]) := 0;
    init(board[1][2]) := 5;
    init(board[1][3]) := 0;
    init(board[2][0]) := 0;
    init(board[2][1]) := 5;
    init(board[2][2]) := 1;
    init(board[2][3]) := 5;
    init(board[3][0]) := 5;
    init(board[3][1]) := 0;
    init(board[3][2]) := 5;
    init(board[3][3]) := 0;
    init(whoIs) := 1;
    init(lin) := 0;
    init(col) := 0;
    next(whoIs) := case
                    whoIs = 1: 2;
                    whoIs = 2: 1;
                    TRUE: whoIs;
                   esac;
DEFINE
    diagEsq := col - 1;
    diagDir := col + 1;
    linUp := lin + 1;
    linDw := lin - 1;
    canMove := case
                 whoIs = 1 & lin < 3 & (board[lin][col] = 1):case
                     col = 0 & board[linUp][diagDir] = 0: TRUE;
                     col = 3 & board[linUp][diagEsq] = 0: TRUE;
                     col > 0 & col < 3:case
                         board[linUp][diagDir] = 0: TRUE;
                         board[linUp][diagEsq] = 0: TRUE;
                         TRUE: FALSE;
                        esac;
                     TRUE: FALSE;
                    esac;
                 whoIs = 2 & lin > 0 & (board[lin][col] = 2):case
                     col = 0 & board[linDw][diagDir] = 0: TRUE;
                     col = 3 & board[linDw][diagEsq] = 0: TRUE;
                     col > 0 & col < 3:case
                         board[linDw][diagDir] = 0: TRUE;
                         board[linDw][diagEsq] = 0: TRUE;
                         TRUE: FALSE;
                        esac;
                     TRUE: FALSE;
                    esac;
                 TRUE: FALSE;
                esac;

TRANS
	next((lin=0 & col=1)|(lin=0 & col=3)|(lin=1 & col=0)|(lin=1 & col=2)|(lin=2 & col=1)|(lin=2 & col=3)|(lin=3 & col=0)|(lin=3 & col=2)
	    |(lin=0 & col=4)|(lin=1 & col=4)|(lin=2 & col=4)|(lin=3 & col=4)|(lin=4 & col=0)|(lin=4 & col=1)|(lin=4 & col=2)|(lin=4 & col=3)) ->
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3]
TRANS
    next(lin=4 & col=4) ->
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3]
TRANS
    next(lin=0 & col=0) -> case
     whoIs=1:
      canMove & next(board[0][0])= 0 & next(board[1][1]) = 1 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
TRANS
    next(lin=0 & col=2) -> case
     whoIs = 1:
      canMove & next(board[0][2])= 0 & next(board[1][1]) = 1 &
      next(board[0][1])=board[0][1]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
TRANS
    next(lin=1 & col=1) -> case
     whoIs = 1:
      canMove & next(board[1][1])= 0 & next(board[2][0]) = 1 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     whoIs = 2:
      canMove & next(board[1][1])= 0 & next(board[0][0]) = 2 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
TRANS
    next(lin=1 & col=3) -> case
     whoIs = 1:
      canMove & next(board[1][3])= 0 & next(board[2][2]) = 1 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][1])=board[1][1]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     whoIs = 2:
      canMove & next(board[1][3])= 0 & next(board[0][2]) = 2 &
      next(board[0][1])=board[0][1]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][1])=board[1][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
TRANS
    next(lin=2 & col=0) -> case
     whoIs = 1:
      canMove & next(board[2][0])= 0 & next(board[3][1]) = 1 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     whoIs = 2:
      canMove & next(board[2][0])= 0 & next(board[1][1]) = 2 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
TRANS
    next(lin=2 & col=2) -> case
     whoIs = 1:
      canMove & next(board[2][2])= 0 & next(board[3][1]) = 1 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][1])=board[2][1]&
      next(board[2][0])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     whoIs = 2:
      canMove & next(board[2][2])= 0 & next(board[1][1]) = 2 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][1])=board[2][1]&
      next(board[2][0])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
TRANS
    next(lin=3 & col=1) -> case
     whoIs = 2: 
      canMove & next(board[3][1])= 0 & next(board[2][0]) = 2 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
TRANS
    next(lin=3 & col=3) -> case
     whoIs = 2: 
      canMove & next(board[3][3])= 0 & next(board[2][0]) = 2 &
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][0])=board[0][0]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][2])=board[3][2]&
      next(board[3][1])=board[3][1];
     TRUE:
      next(board[0][0])=board[0][0]&
      next(board[0][1])=board[0][1]&
      next(board[0][2])=board[0][2]&
      next(board[0][3])=board[0][3]&
      next(board[1][0])=board[1][0]&
      next(board[1][1])=board[1][1]&
      next(board[1][2])=board[1][2]&
      next(board[1][3])=board[1][3]&
      next(board[2][0])=board[2][0]&
      next(board[2][1])=board[2][1]&
      next(board[2][2])=board[2][2]&
      next(board[2][3])=board[2][3]&
      next(board[3][0])=board[3][0]&
      next(board[3][1])=board[3][1]&
      next(board[3][2])=board[3][2]&
      next(board[3][3])=board[3][3];
     esac;
DEFINE
    sucess := board[3][1] = 1 & board[0][0] = 0;
TRANS
    sucess <-> next(lin)=4 & next(col)=4
SPEC
    EF sucess
      
    