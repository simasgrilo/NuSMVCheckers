MODULE move(board,whoIs,pecas1,pecas2)
VAR
	movNum : {1,2};
	lin : {0,1,2,3,4,5,6,7};
	col : {0,1,2,3,4,5,6,7};
DEFINE
	diagEsq := col - 1;
	diagDir := col + 1;
	linUp := lin + 1;
	linDw := lin - 1;
	lin2Up := lin + 2;
	lin2Dw := lin - 2;
	canMove := case
				 whoIs = 1 & lin < 7 & (board[lin][col] = 1 | board[lin][col] = 2):case
					 col = 0 & board[linUp][diagDir] = 0 & movNum = 1: TRUE;
					 col = 7 & board[linUp][diagEsq] = 0 & movNum = 2: TRUE;
					 col > 0 & col < 7:case
						 board[linUp][diagDir] = 0 & movNum = 1 : TRUE;
						 board[linUp][diagEsq] = 0 & movNum = 2 : TRUE;
						 TRUE: FALSE;
						esac;
					 TRUE: FALSE;
					esac;
				 whoIs = 2 & lin > 0 & (board[lin][col] = 3 | board[lin][col] = 4):case
					 col = 0 & board[linDw][diagDir] = 0 & movNum = 1: TRUE;
					 col = 7 & board[linDw][diagEsq] = 0 & movNum = 2: TRUE;
					 col > 0 & col < 7:case
					     board[linDw][diagDir] = 0 & movNum = 1 : TRUE;
						 board[linDw][diagEsq] = 0 & movNum = 2 : TRUE;
						 TRUE: FALSE;
						esac;
					 TRUE: FALSE;
					esac;
				 TRUE: FALSE;
				esac;
	canJump := case
				 whoIs = 1 & (board[lin][col] = 1 | board[lin][col] = 2):case
				   lin = 7:case
				     col = 7 & (board[linDw][diagEsq] = 3 | board[linDw][diagEsq] = 4) & board[lin2Dw][diagEsq] = 0: TRUE;
					 col < 7:case
					   (board[linDw][diagDir]= 3 | board[linDw][diagDir]= 4) & board[lin2Dw][diagDir]= 0: TRUE;
					   (board[linDw][diagEsq]= 3 | board[linDw][diagEsq]= 4) & board[lin2Dw][diagEsq]= 0: TRUE;
					   TRUE: FALSE;
					 esac;
					 TRUE: FALSE;
					esac;
				   lin = 0:case
				     col = 0 & (board[linUp][diagDir] = 3 | board[linUp][diagDir] = 4) & board[lin2Up][diagDir] = 0: TRUE;
					 col < 7:case
					   (board[linUp][diagDir]= 3 | board[linUp][diagDir]= 4) & board[lin2Up][diagDir]= 0: TRUE;
					   (board[linUp][diagEsq]= 3 | board[linUp][diagEsq]= 4) & board[lin2Up][diagEsq]= 0: TRUE;
					   TRUE: FALSE;
					 esac;
					 TRUE: FALSE;
					esac;
				   lin > 0 & lin < 7:case
				     col = 7 & (board[linDw][diagEsq] = 3 | board[linDw][diagEsq] = 4) & board[lin2Dw][diagEsq] = 0: TRUE;
				     col = 7 & (board[linUp][diagEsq] = 3 | board[linUp][diagEsq] = 4) & board[lin2Up][diagEsq] = 0: TRUE;
				     col = 0 & (board[linDw][diagDir] = 3 | board[linDw][diagDir] = 4) & board[lin2Dw][diagDir] = 0: TRUE;
				     col = 0 & (board[linUp][diagDir] = 3 | board[linUp][diagDir] = 4) & board[lin2Up][diagDir] = 0: TRUE;
					 col > 0 & col < 7:case
					   (board[linDw][diagDir]= 3 | board[linDw][diagDir]= 4) & board[lin2Dw][diagDir]= 0: TRUE;
					   (board[linDw][diagEsq]= 3 | board[linDw][diagEsq]= 4) & board[lin2Dw][diagEsq]= 0: TRUE;
					   (board[linUp][diagDir]= 3 | board[linUp][diagDir]= 4) & board[lin2Up][diagDir]= 0: TRUE;
					   (board[linUp][diagEsq]= 3 | board[linUp][diagEsq]= 4) & board[lin2Up][diagEsq]= 0: TRUE;
					   TRUE: FALSE;
				     esac;
					 TRUE: FALSE;
					esac;
					TRUE: FALSE;
				   esac;
				 whoIs = 2 & (board[lin][col] = 3 | board[lin][col] = 4):case
				   lin = 7:case
				     col = 7 & (board[linDw][diagEsq] = 1 | board[linDw][diagEsq] = 2) & board[lin2Dw][diagEsq] = 0: TRUE;
					 col < 7:case
					   (board[linDw][diagDir]= 1 | board[linDw][diagDir]= 1) & board[lin2Dw][diagDir]= 0: TRUE;
					   (board[linDw][diagEsq]= 1 | board[linDw][diagEsq]= 1) & board[lin2Dw][diagEsq]= 0: TRUE;
					   TRUE: FALSE;
					 esac;
					 TRUE: FALSE;
					esac;
				   lin = 0:case
				     col = 0 & (board[linUp][diagDir] = 1 | board[linUp][diagDir] = 2) & board[lin2Up][diagDir] = 0: TRUE;
					 col < 7:case
					   (board[linUp][diagDir]= 1 | board[linUp][diagDir]= 2) & board[lin2Up][diagDir]= 0: TRUE;
					   (board[linUp][diagEsq]= 1 | board[linUp][diagEsq]= 2) & board[lin2Up][diagEsq]= 0: TRUE;
					   TRUE: FALSE;
					 esac;
					TRUE: FALSE;
					esac;
				   lin > 0 & lin < 7:case
				     col = 7 & (board[linDw][diagEsq] = 1 | board[linDw][diagEsq] = 2) & board[lin2Dw][diagEsq] = 0: TRUE;
				     col = 7 & (board[linUp][diagEsq] = 1 | board[linUp][diagEsq] = 2) & board[lin2Up][diagEsq] = 0: TRUE;
				     col = 0 & (board[linDw][diagDir] = 1 | board[linDw][diagDir] = 2) & board[lin2Dw][diagDir] = 0: TRUE;
				     col = 0 & (board[linUp][diagDir] = 1 | board[linUp][diagDir] = 2) & board[lin2Up][diagDir] = 0: TRUE;
					 col > 0 & col < 7:case
					   (board[linDw][diagDir]= 1 | board[linDw][diagDir]= 2) & board[lin2Dw][diagDir]= 0: TRUE;
					   (board[linDw][diagEsq]= 1 | board[linDw][diagEsq]= 2) & board[lin2Dw][diagEsq]= 0: TRUE;
					   (board[linUp][diagDir]= 1 | board[linUp][diagDir]= 2) & board[lin2Up][diagDir]= 0: TRUE;
					   (board[linUp][diagEsq]= 1 | board[linUp][diagEsq]= 2) & board[lin2Up][diagEsq]= 0: TRUE;
					   TRUE: FALSE;
				     esac;
					 TRUE: FALSE;
					esac;
					TRUE: FALSE;
				   esac;
                   TRUE: FALSE;
				  esac;
ASSIGN
	next(board[0][0]) := case
							lin = 0 & col = 0 & (canMove | canJump): 0;
							canJump & 0 = linUp & (0 = diagDir | 0 = diagEsq): 0;
							canJump & 0 = lin2Up & (0 = diagDir | 0 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[0][0];
								esac;
							!canJump & canMove & whoIs = 1 & 0 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[0][0];
								esac;
							!canJump & canMove & whoIs = 2 & 0 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[0][0];
								esac;
							TRUE: board[0][0];
						 esac;
	next(board[0][2]) := case
							lin = 0 & col = 2 & (canMove | canJump): 0;
							canJump & 0 = linUp & (2 = diagDir | 2 = diagEsq): 0;
							canJump & 0 = lin2Up & (2 = diagDir | 2 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[0][2];
								esac;
							!canJump & canMove & whoIs = 1 & 0 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[0][2];
								esac;
							!canJump & canMove & whoIs = 2 & 0 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[0][2];
								esac;
							TRUE: board[0][2];
						 esac;
	next(board[0][4]) := case
							lin = 0 & col = 4 & (canMove | canJump): 0;
							canJump & 0 = linUp & (4 = diagDir | 4 = diagEsq): 0;
							canJump & 0 = lin2Up & (4 = diagDir | 4 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[0][4];
								esac;
							!canJump & canMove & whoIs = 1 & 0 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[0][4];
								esac;
							!canJump & canMove & whoIs = 2 & 0 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[0][4];
								esac;
							TRUE: board[0][4];
						 esac;
	next(board[0][6]) := case
							lin = 0 & col = 6 & (canMove | canJump): 0;
							canJump & 0 = linUp & (6 = diagDir | 6 = diagEsq): 0;
							canJump & 0 = lin2Up & (6 = diagDir | 6 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[0][6];
								esac;
							!canJump & canMove & whoIs = 1 & 0 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[0][6];
								esac;
							!canJump & canMove & whoIs = 2 & 0 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[0][6];
								esac;
							TRUE: board[0][6];
						 esac;
	next(board[1][1]) := case
							lin = 1 & col = 1 & canMove: 0;
							canJump & 1 = linUp & (1 = diagDir | 1 = diagEsq): 0;
							canJump & 1 = lin2Up & (1 = diagDir | 1 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[1][1];
								esac;
							!canJump & canMove & whoIs = 1 & 1 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[1][1];
								esac;
							!canJump & canMove & whoIs = 2 & 1 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[1][1];
								esac;
							TRUE: board[1][1];
						 esac;
	next(board[1][3]) := case
							lin = 1 & col = 3 & canMove: 0;
							canJump & 1 = linUp & (3 = diagDir | 3 = diagEsq): 0;
							canJump & 1 = lin2Up & (3 = diagDir | 3 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[1][3];
								esac;
							!canJump & canMove & whoIs = 1 & 1 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[1][3];
								esac;
							!canJump & canMove & whoIs = 2 & 1 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[1][3];
								esac;
							TRUE: board[1][3];
						 esac;
	next(board[1][5]) := case
							lin = 1 & col = 5 & canMove: 0;
							canJump & 1 = linUp & (5 = diagDir | 5 = diagEsq): 0;
							canJump & 1 = lin2Up & (5 = diagDir | 5 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[1][5];
								esac;
							!canJump & canMove & whoIs = 1 & 1 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[1][5];
								esac;
							!canJump & canMove & whoIs = 2 & 1 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[1][5];
								esac;
							TRUE: board[1][5];
						 esac;
	next(board[1][7]) := case
							lin = 1 & col = 7 & canMove: 0;
							canJump & 1 = linUp & (7 = diagDir | 7 = diagEsq): 0;
							canJump & 1 = lin2Up & (7 = diagDir | 7 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[1][7];
								esac;
							!canJump & canMove & whoIs = 1 & 1 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[1][7];
								esac;
							!canJump & canMove & whoIs = 2 & 1 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[1][7];
								esac;
							TRUE: board[1][7];
						 esac;
	next(board[2][0]) := case
							lin = 2 & col = 0 & (canMove | canJump): 0;
							canJump & 2 = linUp & (0 = diagDir | 0 = diagEsq): 0;
							canJump & 2 = lin2Up & (0 = diagDir | 0 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[2][0];
								esac;
							!canJump & canMove & whoIs = 1 & 2 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[2][0];
								esac;
							!canJump & canMove & whoIs = 2 & 2 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[2][0];
								esac;
							TRUE: board[2][0];
						 esac;
	next(board[2][2]) := case
							lin = 2 & col = 2 & (canMove | canJump): 0;
							canJump & 2 = linUp & (2 = diagDir | 2 = diagEsq): 0;
							canJump & 2 = lin2Up & (2 = diagDir | 2 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[2][2];
								esac;
							!canJump & canMove & whoIs = 1 & 2 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[2][2];
								esac;
							!canJump & canMove & whoIs = 2 & 2 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[2][2];
								esac;
							TRUE: board[2][2];
						 esac;
	next(board[2][4]) := case
							lin = 2 & col = 4 & (canMove | canJump): 0;
							canJump & 2 = linUp & (4 = diagDir | 4 = diagEsq): 0;
							canJump & 2 = lin2Up & (4 = diagDir | 4 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[2][4];
								esac;
							!canJump & canMove & whoIs = 1 & 2 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[2][4];
								esac;
							!canJump & canMove & whoIs = 2 & 2 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[2][4];
								esac;
							TRUE: board[2][4];
						 esac;
	next(board[2][6]) := case
							lin = 2 & col = 6 & (canMove | canJump): 0;
							canJump & 2 = linUp & (6 = diagDir | 6 = diagEsq): 0;
							canJump & 2 = lin2Up & (6 = diagDir | 6 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[2][6];
								esac;
							!canJump & canMove & whoIs = 1 & 2 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[2][6];
								esac;
							!canJump & canMove & whoIs = 2 & 2 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[2][6];
								esac;
							TRUE: board[2][6];
						 esac;
	next(board[3][1]) := case
							lin = 3 & col = 1 & canMove: 0;
							canJump & 3 = linUp & (1 = diagDir | 1 = diagEsq): 0;
							canJump & 3 = lin2Up & (1 = diagDir | 1 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[3][1];
								esac;
							!canJump & canMove & whoIs = 1 & 3 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[3][1];
								esac;
							!canJump & canMove & whoIs = 2 & 3 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[3][1];
								esac;
							TRUE: board[3][1];
						 esac;
	next(board[3][3]) := case
							lin = 3 & col = 3 & canMove: 0;
							canJump & 3 = linUp & (3 = diagDir | 3 = diagEsq): 0;
							canJump & 3 = lin2Up & (3 = diagDir | 3 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[3][3];
								esac;
							!canJump & canMove & whoIs = 1 & 3 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[3][3];
								esac;
							!canJump & canMove & whoIs = 2 & 3 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[3][3];
								esac;
							TRUE: board[3][3];
						 esac;
	next(board[3][5]) := case
							lin = 3 & col = 5 & canMove: 0;
							canJump & 3 = linUp & (5 = diagDir | 5 = diagEsq): 0;
							canJump & 3 = lin2Up & (5 = diagDir | 5 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[3][5];
								esac;
							!canJump & canMove & whoIs = 1 & 3 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[3][5];
								esac;
							!canJump & canMove & whoIs = 2 & 3 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[3][5];
								esac;
							TRUE: board[3][5];
						 esac;
	next(board[3][7]) := case
							lin = 3 & col = 7 & canMove: 0;
							canJump & 3 = linUp & (7 = diagDir | 7 = diagEsq): 0;
							canJump & 3 = lin2Up & (7 = diagDir | 7 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[3][7];
								esac;
							!canJump & canMove & whoIs = 1 & 3 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[3][7];
								esac;
							!canJump & canMove & whoIs = 2 & 3 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[3][7];
								esac;
							TRUE: board[3][7];
						 esac;
	next(board[4][0]) := case
							lin = 4 & col = 0 & (canMove | canJump): 0;
							canJump & 4 = linUp & (0 = diagDir | 0 = diagEsq): 0;
							canJump & 4 = lin2Up & (0 = diagDir | 0 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[4][0];
								esac;
							!canJump & canMove & whoIs = 1 & 4 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[4][0];
								esac;
							!canJump & canMove & whoIs = 2 & 4 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[4][0];
								esac;
							TRUE: board[4][0];
						 esac;
	next(board[4][2]) := case
							lin = 4 & col = 2 & (canMove | canJump): 0;
							canJump & 4 = linUp & (2 = diagDir | 2 = diagEsq): 0;
							canJump & 4 = lin2Up & (2 = diagDir | 2 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[4][2];
								esac;
							!canJump & canMove & whoIs = 1 & 4 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[4][2];
								esac;
							!canJump & canMove & whoIs = 2 & 4 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[4][2];
								esac;
							TRUE: board[4][2];
						 esac;
	next(board[4][4]) := case
							lin = 4 & col = 4 & (canMove | canJump): 0;
							canJump & 4 = linUp & (4 = diagDir | 4 = diagEsq): 0;
							canJump & 4 = lin2Up & (4 = diagDir | 4 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[4][4];
								esac;
							!canJump & canMove & whoIs = 1 & 4 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[4][4];
								esac;
							!canJump & canMove & whoIs = 2 & 4 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[4][4];
								esac;
							TRUE: board[4][4];
						 esac;
	next(board[4][6]) := case
							lin = 4 & col = 6 & (canMove | canJump): 0;
							canJump & 4 = linUp & (6 = diagDir | 6 = diagEsq): 0;
							canJump & 4 = lin2Up & (6 = diagDir | 6 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[4][6];
								esac;
							!canJump & canMove & whoIs = 1 & 4 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[4][6];
								esac;
							!canJump & canMove & whoIs = 2 & 4 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[4][6];
								esac;
							TRUE: board[4][6];
						 esac;
	next(board[5][1]) := case
							lin = 5 & col = 1 & canMove: 0;
							canJump & 5 = linUp & (1 = diagDir | 1 = diagEsq): 0;
							canJump & 5 = lin2Up & (1 = diagDir | 1 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[5][1];
								esac;
							!canJump & canMove & whoIs = 1 & 5 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[5][1];
								esac;
							!canJump & canMove & whoIs = 2 & 5 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[5][1];
								esac;
							TRUE: board[5][1];
						 esac;
	next(board[5][3]) := case
							lin = 5 & col = 3 & canMove: 0;
							canJump & 5 = linUp & (3 = diagDir | 3 = diagEsq): 0;
							canJump & 5 = lin2Up & (3 = diagDir | 3 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[5][3];
								esac;
							!canJump & canMove & whoIs = 1 & 5 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[5][3];
								esac;
							!canJump & canMove & whoIs = 2 & 5 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[5][3];
								esac;
							TRUE: board[5][3];
						 esac;
	next(board[5][5]) := case
							lin = 5 & col = 5 & canMove: 0;
							canJump & 5 = linUp & (5 = diagDir | 5 = diagEsq): 0;
							canJump & 5 = lin2Up & (5 = diagDir | 5 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[5][5];
								esac;
							!canJump & canMove & whoIs = 1 & 5 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[5][5];
								esac;
							!canJump & canMove & whoIs = 2 & 5 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[5][5];
								esac;
							TRUE: board[5][5];
						 esac;
	next(board[5][7]) := case
							lin = 5 & col = 7 & canMove: 0;
							canJump & 5 = linUp & (7 = diagDir | 7 = diagEsq): 0;
							canJump & 5 = lin2Up & (7 = diagDir | 7 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[5][7];
								esac;
							!canJump & canMove & whoIs = 1 & 5 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[5][7];
								esac;
							!canJump & canMove & whoIs = 2 & 5 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[5][7];
								esac;
							TRUE: board[5][7];
						 esac;
	next(board[6][0]) := case
							lin = 6 & col = 0 & (canMove | canJump): 0;
							canJump & 6 = linUp & (0 = diagDir | 0 = diagEsq): 0;
							canJump & 6 = lin2Up & (0 = diagDir | 0 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[6][0];
								esac;
							!canJump & canMove & whoIs = 1 & 6 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[6][0];
								esac;
							!canJump & canMove & whoIs = 2 & 6 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[6][0];
								esac;
							TRUE: board[6][0];
						 esac;
	next(board[6][2]) := case
							lin = 6 & col = 2 & (canMove | canJump): 0;
							canJump & 6 = linUp & (2 = diagDir | 2 = diagEsq): 0;
							canJump & 6 = lin2Up & (2 = diagDir | 2 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[6][2];
								esac;
							!canJump & canMove & whoIs = 1 & 6 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[6][2];
								esac;
							!canJump & canMove & whoIs = 2 & 6 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[6][2];
								esac;
							TRUE: board[6][2];
						 esac;
	next(board[6][4]) := case
							lin = 6 & col = 4 & (canMove | canJump): 0;
							canJump & 6 = linUp & (4 = diagDir | 4 = diagEsq): 0;
							canJump & 6 = lin2Up & (4 = diagDir | 4 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[6][4];
								esac;
							!canJump & canMove & whoIs = 1 & 6 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[6][4];
								esac;
							!canJump & canMove & whoIs = 2 & 6 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[6][4];
								esac;
							TRUE: board[6][4];
						 esac;
	next(board[6][6]) := case
							lin = 6 & col = 6 & (canMove | canJump): 0;
							canJump & 6 = linUp & (6 = diagDir | 6 = diagEsq): 0;
							canJump & 6 = lin2Up & (6 = diagDir | 6 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[6][6];
								esac;
							!canJump & canMove & whoIs = 1 & 6 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[6][6];
								esac;
							!canJump & canMove & whoIs = 2 & 6 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[6][6];
								esac;
							TRUE: board[6][6];
						 esac;
	next(board[7][1]) := case
							lin = 7 & col = 1 & canMove: 0;
							canJump & 7 = linUp & (1 = diagDir | 1 = diagEsq): 0;
							canJump & 7 = lin2Up & (1 = diagDir | 1 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[7][1];
								esac;
							!canJump & canMove & whoIs = 1 & 7 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[7][1];
								esac;
							!canJump & canMove & whoIs = 2 & 7 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[7][1];
								esac;
							TRUE: board[7][1];
						 esac;
	next(board[7][3]) := case
							lin = 7 & col = 3 & canMove: 0;
							canJump & 7 = linUp & (3 = diagDir | 3 = diagEsq): 0;
							canJump & 7 = lin2Up & (3 = diagDir | 3 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[7][3];
								esac;
							!canJump & canMove & whoIs = 1 & 7 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[7][3];
								esac;
							!canJump & canMove & whoIs = 2 & 7 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[7][3];
								esac;
							TRUE: board[7][3];
						 esac;
	next(board[7][5]) := case
							lin = 7 & col = 5 & canMove: 0;
							canJump & 7 = linUp & (5 = diagDir | 5 = diagEsq): 0;
							canJump & 7 = lin2Up & (5 = diagDir | 5 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[7][5];
								esac;
							!canJump & canMove & whoIs = 1 & 7 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[7][5];
								esac;
							!canJump & canMove & whoIs = 2 & 7 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[7][5];
								esac;
							TRUE: board[7][5];
						 esac;
	next(board[7][7]) := case
							lin = 7 & col = 7 & canMove: 0;
							canJump & 7 = linUp & (7 = diagDir | 7 = diagEsq): 0;
							canJump & 7 = lin2Up & (7 = diagDir | 7 = diagEsq):case
								 whoIs = 1: 1;
								 whoIs = 2: 3;
								 TRUE: board[7][7];
								esac;
							!canJump & canMove & whoIs = 1 & 7 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[7][7];
								esac;
							!canJump & canMove & whoIs = 2 & 7 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[7][7];
								esac;
							TRUE: board[7][7];
						 esac;

	next(whoIs) := case
					canMove & whoIs = 1: 2;
					canMove & whoIs = 2: 1;
					TRUE: whoIs;
				   esac;
				
FAIRNESS
  running;
MODULE main
VAR
	board : array 0..7 of array 0..7 of 0..5;
	whoIs : 1..2;
	pecas1:0..12;
	pecas2:0..12;
	moveTest: process move(board,whoIs,pecas1,pecas2);
ASSIGN
	init(whoIs) := 1;
	init(pecas1) := 0;
	init(pecas2) := 0;
	init(board[0][0]) := 0;
	init(board[0][1]) := 5;
	init(board[0][2]) := 0;
	init(board[0][3]) := 5;
	init(board[0][4]) := 0;
	init(board[0][5]) := 5;
	init(board[0][6]) := 0;
	init(board[0][7]) := 5;
	init(board[1][0]) := 5;
	init(board[1][1]) := 0;
	init(board[1][2]) := 5;
	init(board[1][3]) := 0;
	init(board[1][4]) := 5;
	init(board[1][5]) := 0;
	init(board[1][6]) := 5;
	init(board[1][7]) := 0;
	init(board[2][0]) := 0;
	init(board[2][1]) := 5;
	init(board[2][2]) := 0;
	init(board[2][3]) := 5;
	init(board[2][4]) := 0;
	init(board[2][5]) := 5;
	init(board[2][6]) := 0;
	init(board[2][7]) := 5;
	init(board[3][0]) := 5;
	init(board[3][1]) := 0;
	init(board[3][2]) := 5;
	init(board[3][3]) := 0;
	init(board[3][4]) := 5;
	init(board[3][5]) := 0;
	init(board[3][6]) := 5;
	init(board[3][7]) := 0;
	init(board[4][0]) := 0;
	init(board[4][1]) := 5;
	init(board[4][2]) := 0;
	init(board[4][3]) := 5;
	init(board[4][4]) := 0;
	init(board[4][5]) := 5;
	init(board[4][6]) := 0;
	init(board[4][7]) := 5;
	init(board[5][0]) := 5;
	init(board[5][1]) := 0;
	init(board[5][2]) := 5;
	init(board[5][3]) := 0;
	init(board[5][4]) := 5;
	init(board[5][5]) := 0;
	init(board[5][6]) := 5;
	init(board[5][7]) := 0;
	init(board[6][0]) := 0;
	init(board[6][1]) := 5;
	init(board[6][2]) := 0;
	init(board[6][3]) := 5;
	init(board[6][4]) := 0;
	init(board[6][5]) := 5;
	init(board[6][6]) := 0;
	init(board[6][7]) := 5;
	init(board[7][0]) := 5;
	init(board[7][1]) := 0;
	init(board[7][2]) := 5;
	init(board[7][3]) := 0;
	init(board[7][4]) := 5;
	init(board[7][5]) := 0;
	init(board[7][6]) := 5;
	init(board[7][7]) := 0;
SPEC
	AG (pecas1 != 0 )