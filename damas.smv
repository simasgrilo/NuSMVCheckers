MODULE move(board,whoIs)
VAR
	movNum : {1,2};
	lin : {0,1,2,3,4,5,6,7};
	col : {0,1,2,3,4,5,6,7};
DEFINE
	diagEsq := col - 1;
	diagDir := col + 1;
	linUp := lin + 1;
	linDw := lin - 1;
	canMove := case
				 whoIs = 1 & lin < 7 & (board[lin][col] = 1 | board[lin][col] = 2):case
					 col = 0 & board[linUp][diagDir] = 0 & movNum = 1: TRUE;
					 col = 7 & board[linUp][diagEsq] = 0 & movNum = 2: TRUE;
					 col > 0 & col < 7:case
						 board[linUp][diagDir] = 0 & movNum = 1 : TRUE;
						 board[linUp][diagEsq] = 0 & movNum = 2 : TRUE;
						 TRUE: FALSE;
						esac;
					 TRUE: FALSE;
					esac;
				 whoIs = 2 & lin > 0 & (board[lin][col] = 3 | board[lin][col] = 4):case
					 col = 0 & board[linDw][diagDir] = 0 & movNum = 1: TRUE;
					 col = 7 & board[linDw][diagEsq] = 0 & movNum = 2: TRUE;
					 col > 0 & col < 7:case
					     board[linDw][diagDir] = 0 & movNum = 1 : TRUE;
						 board[linDw][diagEsq] = 0 & movNum = 2 : TRUE;
						 TRUE: FALSE;
						esac;
					 TRUE: FALSE;
					esac;
				 TRUE: FALSE;
				esac;
	canJump := case
				 whoIs = 1 & lin < 7 & (board[lin][col] = 1 | board[lin][col] = 2):case
					 col = 0 & board[linUp][diagDir] = 0 & movNum = 1: TRUE;
					 col = 7 & board[linUp][diagEsq] = 0 & movNum = 2: TRUE;
					 col > 0 & col < 7:case
						 board[linUp][diagDir] = 0 & movNum = 1 : TRUE;
						 board[linUp][diagEsq] = 0 & movNum = 2 : TRUE;
						 TRUE: FALSE;
						esac;
					 TRUE: FALSE;
					esac;
				 whoIs = 2 & lin > 0 & (board[lin][col] = 3 | board[lin][col] = 4):case
					 col = 0 & board[linDw][diagDir] = 0 & movNum = 1: TRUE;
					 col = 7 & board[linDw][diagEsq] = 0 & movNum = 2: TRUE;
					 col > 0 & col < 7:case
					     board[linDw][diagDir] = 0 & movNum = 1 : TRUE;
						 board[linDw][diagEsq] = 0 & movNum = 2 : TRUE;
						 TRUE: FALSE;
						esac;
					 TRUE: FALSE;
					esac;
				 TRUE: FALSE;
				esac;
ASSIGN
	next(board[0][0]) := case
							lin = 0 & col = 0 & canMove: 0;
							canMove & whoIs = 1 & 0 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[0][0];
								esac;
							canMove & whoIs = 2 & 0 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[0][0];
								esac;
							TRUE: board[0][0];
						 esac;
	next(board[0][2]) := case
							lin = 0 & col = 2 & canMove: 0;
							canMove & whoIs = 1 & 0 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[0][2];
								esac;
							canMove & whoIs = 2 & 0 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[0][2];
								esac;
							TRUE: board[0][2];
						 esac;
	next(board[0][4]) := case
							lin = 0 & col = 4 & canMove: 0;
							canMove & whoIs = 1 & 0 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[0][4];
								esac;
							canMove & whoIs = 2 & 0 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[0][4];
								esac;
							TRUE: board[0][4];
						 esac;
	next(board[0][6]) := case
							lin = 0 & col = 6 & canMove: 0;
							canMove & whoIs = 1 & 0 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[0][6];
								esac;
							canMove & whoIs = 2 & 0 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[0][6];
								esac;
							TRUE: board[0][6];
						 esac;
	next(board[1][1]) := case
							lin = 1 & col = 1 & canMove: 0;
							canMove & whoIs = 1 & 1 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[1][1];
								esac;
							canMove & whoIs = 2 & 1 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[1][1];
								esac;
							TRUE: board[1][1];
						 esac;
	next(board[1][3]) := case
							lin = 1 & col = 3 & canMove: 0;
							canMove & whoIs = 1 & 1 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[1][3];
								esac;
							canMove & whoIs = 2 & 1 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[1][3];
								esac;
							TRUE: board[1][3];
						 esac;
	next(board[1][5]) := case
							lin = 1 & col = 5 & canMove: 0;
							canMove & whoIs = 1 & 1 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[1][5];
								esac;
							canMove & whoIs = 2 & 1 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[1][5];
								esac;
							TRUE: board[1][5];
						 esac;
	next(board[1][7]) := case
							lin = 1 & col = 7 & canMove: 0;
							canMove & whoIs = 1 & 1 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[1][7];
								esac;
							canMove & whoIs = 2 & 1 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[1][7];
								esac;
							TRUE: board[1][7];
						 esac;
	next(board[2][0]) := case
							lin = 2 & col = 0 & canMove: 0;
							canMove & whoIs = 1 & 2 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[2][0];
								esac;
							canMove & whoIs = 2 & 2 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[2][0];
								esac;
							TRUE: board[2][0];
						 esac;
	next(board[2][2]) := case
							lin = 2 & col = 2 & canMove: 0;
							canMove & whoIs = 1 & 2 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[2][2];
								esac;
							canMove & whoIs = 2 & 2 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[2][2];
								esac;
							TRUE: board[2][2];
						 esac;
	next(board[2][4]) := case
							lin = 2 & col = 4 & canMove: 0;
							canMove & whoIs = 1 & 2 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[2][4];
								esac;
							canMove & whoIs = 2 & 2 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[2][4];
								esac;
							TRUE: board[2][4];
						 esac;
	next(board[2][6]) := case
							lin = 2 & col = 6 & canMove: 0;
							canMove & whoIs = 1 & 2 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[2][6];
								esac;
							canMove & whoIs = 2 & 2 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[2][6];
								esac;
							TRUE: board[2][6];
						 esac;
	next(board[3][1]) := case
							lin = 3 & col = 1 & canMove: 0;
							canMove & whoIs = 1 & 3 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[3][1];
								esac;
							canMove & whoIs = 2 & 3 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[3][1];
								esac;
							TRUE: board[3][1];
						 esac;
	next(board[3][3]) := case
							lin = 3 & col = 3 & canMove: 0;
							canMove & whoIs = 1 & 3 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[3][3];
								esac;
							canMove & whoIs = 2 & 3 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[3][3];
								esac;
							TRUE: board[3][3];
						 esac;
	next(board[3][5]) := case
							lin = 3 & col = 5 & canMove: 0;
							canMove & whoIs = 1 & 3 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[3][5];
								esac;
							canMove & whoIs = 2 & 3 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[3][5];
								esac;
							TRUE: board[3][5];
						 esac;
	next(board[3][7]) := case
							lin = 3 & col = 7 & canMove: 0;
							canMove & whoIs = 1 & 3 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[3][7];
								esac;
							canMove & whoIs = 2 & 3 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[3][7];
								esac;
							TRUE: board[3][7];
						 esac;
	next(board[4][0]) := case
							lin = 4 & col = 0 & canMove: 0;
							canMove & whoIs = 1 & 4 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[4][0];
								esac;
							canMove & whoIs = 2 & 4 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[4][0];
								esac;
							TRUE: board[4][0];
						 esac;
	next(board[4][2]) := case
							lin = 4 & col = 2 & canMove: 0;
							canMove & whoIs = 1 & 4 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[4][2];
								esac;
							canMove & whoIs = 2 & 4 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[4][2];
								esac;
							TRUE: board[4][2];
						 esac;
	next(board[4][4]) := case
							lin = 4 & col = 4 & canMove: 0;
							canMove & whoIs = 1 & 4 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[4][4];
								esac;
							canMove & whoIs = 2 & 4 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[4][4];
								esac;
							TRUE: board[4][4];
						 esac;
	next(board[4][6]) := case
							lin = 4 & col = 6 & canMove: 0;
							canMove & whoIs = 1 & 4 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[4][6];
								esac;
							canMove & whoIs = 2 & 4 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[4][6];
								esac;
							TRUE: board[4][6];
						 esac;
	next(board[5][1]) := case
							lin = 5 & col = 1 & canMove: 0;
							canMove & whoIs = 1 & 5 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[5][1];
								esac;
							canMove & whoIs = 2 & 5 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[5][1];
								esac;
							TRUE: board[5][1];
						 esac;
	next(board[5][3]) := case
							lin = 5 & col = 3 & canMove: 0;
							canMove & whoIs = 1 & 5 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[5][3];
								esac;
							canMove & whoIs = 2 & 5 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[5][3];
								esac;
							TRUE: board[5][3];
						 esac;
	next(board[5][5]) := case
							lin = 5 & col = 5 & canMove: 0;
							canMove & whoIs = 1 & 5 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[5][5];
								esac;
							canMove & whoIs = 2 & 5 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[5][5];
								esac;
							TRUE: board[5][5];
						 esac;
	next(board[5][7]) := case
							lin = 5 & col = 7 & canMove: 0;
							canMove & whoIs = 1 & 5 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[5][7];
								esac;
							canMove & whoIs = 2 & 5 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[5][7];
								esac;
							TRUE: board[5][7];
						 esac;
	next(board[6][0]) := case
							lin = 6 & col = 0 & canMove: 0;
							canMove & whoIs = 1 & 6 = linUp:case
								 0 = diagDir & movNum = 1: 1;
								 0 = diagDir & movNum = 2: 1;
								 TRUE: board[6][0];
								esac;
							canMove & whoIs = 2 & 6 = linDw:case
								 0 = diagDir & movNum = 1: 3;
								 0 = diagDir & movNum = 2: 3;
								 TRUE: board[6][0];
								esac;
							TRUE: board[6][0];
						 esac;
	next(board[6][2]) := case
							lin = 6 & col = 2 & canMove: 0;
							canMove & whoIs = 1 & 6 = linUp:case
								 2 = diagDir & movNum = 1: 1;
								 2 = diagDir & movNum = 2: 1;
								 TRUE: board[6][2];
								esac;
							canMove & whoIs = 2 & 6 = linDw:case
								 2 = diagDir & movNum = 1: 3;
								 2 = diagDir & movNum = 2: 3;
								 TRUE: board[6][2];
								esac;
							TRUE: board[6][2];
						 esac;
	next(board[6][4]) := case
							lin = 6 & col = 4 & canMove: 0;
							canMove & whoIs = 1 & 6 = linUp:case
								 4 = diagDir & movNum = 1: 1;
								 4 = diagDir & movNum = 2: 1;
								 TRUE: board[6][4];
								esac;
							canMove & whoIs = 2 & 6 = linDw:case
								 4 = diagDir & movNum = 1: 3;
								 4 = diagDir & movNum = 2: 3;
								 TRUE: board[6][4];
								esac;
							TRUE: board[6][4];
						 esac;
	next(board[6][6]) := case
							lin = 6 & col = 6 & canMove: 0;
							canMove & whoIs = 1 & 6 = linUp:case
								 6 = diagDir & movNum = 1: 1;
								 6 = diagDir & movNum = 2: 1;
								 TRUE: board[6][6];
								esac;
							canMove & whoIs = 2 & 6 = linDw:case
								 6 = diagDir & movNum = 1: 3;
								 6 = diagDir & movNum = 2: 3;
								 TRUE: board[6][6];
								esac;
							TRUE: board[6][6];
						 esac;
	next(board[7][1]) := case
							lin = 7 & col = 1 & canMove: 0;
							canMove & whoIs = 1 & 7 = linUp:case
								 1 = diagDir & movNum = 1: 1;
								 1 = diagDir & movNum = 2: 1;
								 TRUE: board[7][1];
								esac;
							canMove & whoIs = 2 & 7 = linDw:case
								 1 = diagDir & movNum = 1: 3;
								 1 = diagDir & movNum = 2: 3;
								 TRUE: board[7][1];
								esac;
							TRUE: board[7][1];
						 esac;
	next(board[7][3]) := case
							lin = 7 & col = 3 & canMove: 0;
							canMove & whoIs = 1 & 7 = linUp:case
								 3 = diagDir & movNum = 1: 1;
								 3 = diagDir & movNum = 2: 1;
								 TRUE: board[7][3];
								esac;
							canMove & whoIs = 2 & 7 = linDw:case
								 3 = diagDir & movNum = 1: 3;
								 3 = diagDir & movNum = 2: 3;
								 TRUE: board[7][3];
								esac;
							TRUE: board[7][3];
						 esac;
	next(board[7][5]) := case
							lin = 7 & col = 5 & canMove: 0;
							canMove & whoIs = 1 & 7 = linUp:case
								 5 = diagDir & movNum = 1: 1;
								 5 = diagDir & movNum = 2: 1;
								 TRUE: board[7][5];
								esac;
							canMove & whoIs = 2 & 7 = linDw:case
								 5 = diagDir & movNum = 1: 3;
								 5 = diagDir & movNum = 2: 3;
								 TRUE: board[7][5];
								esac;
							TRUE: board[7][5];
						 esac;
	next(board[7][7]) := case
							lin = 7 & col = 7 & canMove: 0;
							canMove & whoIs = 1 & 7 = linUp:case
								 7 = diagDir & movNum = 1: 1;
								 7 = diagDir & movNum = 2: 1;
								 TRUE: board[7][7];
								esac;
							canMove & whoIs = 2 & 7 = linDw:case
								 7 = diagDir & movNum = 1: 3;
								 7 = diagDir & movNum = 2: 3;
								 TRUE: board[7][7];
								esac;
							TRUE: board[7][7];
						 esac;
	next(whoIs) := case
					canMove & whoIs = 1: 2;
					canMove & whoIs = 2: 1;
					TRUE: whois;
				   esac;
--	next(lin):= case
--				 col = 6 | col = 7: case
--									 lin < 7: linUp;
--									 lin = 7: 0;
--									 TRUE: lin;
--									esac;
--				 TRUE: lin;
--				 esac;
--	next(col):= case
--				 lin mod 2 = 0: case
--								 col < 6: col + 2;
--								 col = 6: 1;
--								 TRUE: col;
--								esac;
--				 lin mod 2 = 1: case
--								 col < 7: col + 2;
--								 col = 7: 0;
--								 TRUE: col;
--								esac;
--				TRUE: col;
--				esac;
				
MODULE main
VAR
	board : array -1..8 of array -1..8 of {0,1,2,3,4};
	whoIs : {1,2};
--	lin : {0,1,2,3,4,5,6,7};
--	col : {0,1,2,3,4,5,6,7};
	moveTest: process move(board,whoIs);
ASSIGN
--	init(lin) := 0;
--	init(col) := 0;
	init(whoIs) := 1;
	init(board[0][0]):=1;
	init(board[0][2]):=1;
SPEC
	EF (board[0][0] = 0)