--------------------------------------------------------------------------------------
--                                      P1
--         1              2                   ....
--      ([1][1])([1][2])..........................................([1][8])
--                  5
--      ([2][1])([2][2])..........................................([2][8])
--         .                                                         .
--         .                                                         .
--         .                                                         .
--      ([8][1])([8][2])..........................................([8][8])
--                                      P2
--
--      NormalP1 = 1, QueenP1 = 2                       NormalP1 = 3, QueenP1 = 4
-------------------------------------------------------------------------------------

MODULE main
VAR
  turn : boolean;
  num_pieces1: 0..12;
  num_pieces2: 0..12;
  board : array 1..8 of array 1..8 of {-1, 0, 1, 2, 3, 4};
  player1 : process player(1, board, turn, num_pieces1, num_pieces2);
  player2 : process player(2, board, turn, num_pieces1, num_pieces2);
ASSIGN
  init(turn) := FALSE;
  init(num_pieces1) := 4;
  init(num_pieces2) := 4;
  --Player 1
  init(board[1][1]) := 1;
  init(board[1][2]) := -1;
  init(board[1][3]) := 1;
  init(board[1][4]) := -1;
  init(board[1][5]) := 1;
  init(board[1][6]) := -1;
  init(board[1][7]) := 1;
  init(board[1][8]) := -1;

  init(board[2][1]) := -1;
  init(board[2][2]) := 0;
  init(board[2][3]) := -1;
  init(board[2][4]) := 0;
  init(board[2][5]) := -1;
  init(board[2][6]) := 0;
  init(board[2][7]) := -1;
  init(board[2][8]) := 0;

  init(board[3][1]) := 0;
  init(board[3][2]) := -1;
  init(board[3][3]) := 0;
  init(board[3][4]) := -1;
  init(board[3][5]) := 0;
  init(board[3][6]) := -1;
  init(board[3][7]) := 0;
  init(board[3][8]) := -1;

  --Neutro
  init(board[4][1]) := -1;
  init(board[4][2]) := 0;
  init(board[4][3]) := -1;
  init(board[4][4]) := 0;
  init(board[4][5]) := -1;
  init(board[4][6]) := 0;
  init(board[4][7]) := -1;
  init(board[4][8]) := 0;

  init(board[5][1]) := 0;
  init(board[5][2]) := -1;
  init(board[5][3]) := 0;
  init(board[5][4]) := -1;
  init(board[5][5]) := 0;
  init(board[5][6]) := -1;
  init(board[5][7]) := 0;
  init(board[5][8]) := -1;

  --Player 2
  init(board[6][1]) := -1;
  init(board[6][2]) := 0;
  init(board[6][3]) := -1;
  init(board[6][4]) := 0;
  init(board[6][5]) := -1;
  init(board[6][6]) := 0;
  init(board[6][7]) := -1;
  init(board[6][8]) := 0;

  init(board[7][1]) := 0;
  init(board[7][2]) := -1;
  init(board[7][3]) := 0;
  init(board[7][4]) := -1;
  init(board[7][5]) := 0;
  init(board[7][6]) := -1;
  init(board[7][7]) := 0;
  init(board[7][8]) := -1;

  init(board[8][1]) := -1;
  init(board[8][2]) := 2;
  init(board[8][3]) := -1;
  init(board[8][4]) := 2;
  init(board[8][5]) := -1;
  init(board[8][6]) := 2;
  init(board[8][7]) := -1;
  init(board[8][8]) := 2;

  --Invalid Spaces
  next(board[1][2]) := -1;
  next(board[1][4]) := -1;
  next(board[1][6]) := -1;
  next(board[1][8]) := -1;
  next(board[2][1]) := -1;
  next(board[2][3]) := -1;
  next(board[2][5]) := -1;
  next(board[2][7]) := -1;
  next(board[3][2]) := -1;
  next(board[3][4]) := -1;
  next(board[3][6]) := -1;
  next(board[3][8]) := -1;
  next(board[4][1]) := -1;
  next(board[4][3]) := -1;
  next(board[4][5]) := -1;
  next(board[4][7]) := -1;
  next(board[5][2]) := -1;
  next(board[5][4]) := -1;
  next(board[5][6]) := -1;
  next(board[5][8]) := -1;
  next(board[6][1]) := -1;
  next(board[6][3]) := -1;
  next(board[6][5]) := -1;
  next(board[6][7]) := -1;
  next(board[7][2]) := -1;
  next(board[7][4]) := -1;
  next(board[7][6]) := -1;
  next(board[7][8]) := -1;
  next(board[8][1]) := -1;
  next(board[8][3]) := -1;
  next(board[8][5]) := -1;
  next(board[8][7]) := -1;
SPEC
  !EF (board[1][1] = 0)

MODULE player(whois, board, turn, num_pieces1, num_pieces2)
VAR
  state : {idle, entering, jumping, moving, exiting};
  line : 1..8;
  column : 1..8;
  destVar : 1..14;
ASSIGN
  init(state) := idle;
  next(state) :=  case
                    state = idle : {idle, entering};
                    state = entering & whois = 1 & !turn : jumping;
                    state = entering & whois = 2 & turn : jumping;
                    state = jumping : {jumping, moving, exiting};
                    state = moving : {moving, exiting};
                    state = exiting : idle;
                    TRUE : state;
                    esac;

  next(turn) :=  case
                  state = exiting : !turn;
                  TRUE : turn;
                esac;

  --Game Spaces
  next(board[1][1]) := case
                        --Check Currenty State
                        state = moving :
                                            case
                                              --Check if destiny or source
                                              --Case source and is owner of the piece
                                              line = 1 & column = 1 & (whois = 1 & (board[1][1] = 1  | board[1][1] = 2))
                                                                    & (whois = 2 & (board[1][1] = 3  | board[1][1] = 4)):
                                                                      case
                                                                        -- Check if normal : move 1 space
                                                                        board[1][1] = 1 | board[1][1] = 3:
                                                                                                          case
                                                                                                          -- is destiny empty? Move : do nothing
                                                                                                          destVar = 1 & board[2][2] = 0: 0;
                                                                                                          TRUE: board[1][1];
                                                                                                          esac;
                                                                        --check if queen : move N spaces
                                                                        board[1][1] = 2 | board[1][1] = 4:
                                                                                                          case
                                                                                                            -- Is Destiny empty? Move : do nothing
                                                                                                            -- Can only move Down and Right
                                                                                                            destVar = 7 & board[8][8] = 0: 0;
                                                                                                            destVar = 6 & board[7][7] = 0: 0;
                                                                                                            destVar = 5 & board[6][6] = 0: 0;
                                                                                                            destVar = 4 & board[5][5] = 0: 0;
                                                                                                            destVar = 3 & board[4][4] = 0: 0;
                                                                                                            destVar = 2 & board[3][3] = 0: 0;
                                                                                                            destVar = 1 & board[2][2] = 0: 0;
                                                                                                            TRUE: board[1][1];
                                                                                                            esac;
                                                                        --NEVER REACHED
                                                                        TRUE: board[1][1];
                                                                        esac;
                                              --Case Destiny and Free Space
                                              line + destVar = 1 & column + destVar = 1 & board[1][1] = 0:
                                                                                          case
                                                                                          -- Check if normal and P1
                                                                                          board[line][column] = 1:
                                                                                                                  case
                                                                                                                    -- Receive the piece
                                                                                                                    destVar = -1: board[2][2];
                                                                                                                    TRUE: board[1][1];
                                                                                                                  esac;
                                                                                         -- Check if normal and P2
                                                                                          board[line][column] = 3:
                                                                                                                  case
                                                                                                                    -- Receive the piece and make it queen
                                                                                                                    destVar = -1: board[2][2] + 1;
                                                                                                                    TRUE: board[1][1];
                                                                                                                  esac;

                                                                                          --check if queen
                                                                                          board[line][column] = 2 | board[line][column] = 4:
                                                                                                                            case
                                                                                                                              -- Check Source
                                                                                                                              -- Can only recieve from UP and LEFT
                                                                                                                              destVar = -7 : board[8][8];
                                                                                                                              destVar = -6 : board[7][7];
                                                                                                                              destVar = -5 : board[6][6];
                                                                                                                              destVar = -4 : board[5][5];
                                                                                                                              destVar = -3 : board[4][4];
                                                                                                                              destVar = -2 : board[3][3];
                                                                                                                              destVar = -1 : board[2][2];
                                                                                                                              TRUE: board[1][1];
                                                                                                                              esac;
                                                                                          --NEVER REACHED
                                                                                          TRUE: board[1][1];
                                                                                          esac;
                                              --I do not make part of the move
                                              TRUE: board[1][1];
                                              esac;

                      -- Any other state do nothing
                      TRUE: board[1][1];
                      esac;

  next(board[1][3]) := board[1][3];
  next(board[1][5]) := board[1][5];
  next(board[1][7]) := board[1][7];
  next(board[2][2]) := board[2][2];
  next(board[2][4]) := board[2][4];
  next(board[2][6]) := board[2][6];
  next(board[2][8]) := board[2][8];
  next(board[3][1]) := board[3][1];
  next(board[3][3]) := board[3][3];
  next(board[3][5]) := board[3][5];
  next(board[3][7]) := board[3][7];
  next(board[4][2]) := board[4][2];
  next(board[4][4]) := board[4][4];
  next(board[4][6]) := board[4][6];
  next(board[4][8]) := board[4][8];
  next(board[5][1]) := board[5][1];
  next(board[5][3]) := board[5][3];
  next(board[5][5]) := board[5][5];
  next(board[5][7]) := board[5][7];
  next(board[6][2]) := board[6][2];
  next(board[6][4]) := board[6][4];
  next(board[6][6]) := board[6][6];
  next(board[6][8]) := board[6][8];
  next(board[7][1]) := board[7][1];
  next(board[7][3]) := board[7][3];
  next(board[7][5]) := board[7][5];
  next(board[7][7]) := board[7][7];
  next(board[8][2]) := board[8][2];
  next(board[8][4]) := board[8][4];
  next(board[8][6]) := board[8][6];
  next(board[8][8]) := board[8][8];

FAIRNESS
  running
